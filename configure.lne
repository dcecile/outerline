gcc, -o, main, main.c

(var, src, (suffix, .c, x, y, z))

(var, obj, (swpfix, .c, .o, (src))

gcc, -o, main, (src), -I(join, `,, lib, lib2)

gcc, -o, main, (src), (prefix, -I, lib, lib2)

(var, pre i, ((x...) (prefix, -I, x)))

(var, op, (cond, (env, PLUS), (ref, +), (else), (ref, -)))

(var, r, (call, (op), 1, 2))

(cond,
  @(x),
    1, 2, 3,
  @(y),
    4, 5, 6,
  @(z),
    (new, @q, 3)) # returned hashes need to be wrapped

(call, (ref, (cat, var` , (proj)))) # error on cat if (proj) has more than one item

C:\Program Files\Vim\vim72\vim.exe, C:\Documents and Settings\administrator\.bashrc
  # maybe zero newline dependency if bare strings only at end of call

(zip with, (->, x, y, @, (+ (x), (y))), @left, 1, 2, @right, 3, 4)

(c compile,
  project,
  (src),
  @chain, llvm,
  @includes, (includes),
  @individual opt, (new, # maybe 'new' not required, obvious from hash-only?
    @main.c, -DGO, -DTEST,
    @test.c, -DTEST),
  @lib, m, xml)

(outerline, # should be implicit
  (var, project, (c compile, project name))
  (set, project, source,
    (src)) # pure operation, rebinds project to a new object
  (set, project, compile chain,
    llvm)
  (set, project, includes,
    (includes))
  (set, project, inidividual opt,
    @main.c, -DGO, -DTEST,
    @test.c, -DTEST)
  (set, project, libraries,
    m, xml)
  (project)) # outerline looks for a @rules oop-lambda

(+,
  (var, q, 0)
  ignored
  (var, s, 1)
  (q), (s))

(+,
  (var, q, 0)
  (q),
  (var, s, (-, (q) 2)) # error, q out of scope
  (s))

(var, my var, (->, arg one, arg two, @, (+, (arg one), (arg two))))
(call, (my var), 1, 2)

(fun, my fun, (->, a 1, a 2, @, (+, (a 1), (a, 2))))
(my fun, 1, 2)
