gcc, -o, main, main.c

(var, src, (suffix, .c, x, y, z))

(var, obj, (swpfix, .c, .o, (src))

gcc, -o, main, (src), (cat, -I, (join, `,, lib, lib2))

gcc, -o, main, (src), (prefix, -I, lib, lib2)

(def; pre i, x...; (prefix, -I, (x)))

(var, op, (cond; (env, PLUS), (ref, +); else, (ref, -)))

(var, r, (call, (op), 1, 2))

(cond;
  (x),
    1, 2, 3;
  (y),
    4, 5, 6;
  (z),
    (rec; q, 3))

(call, (ref, (cat, my` , (proj)))) # error on cat if (proj) has more than one item

C:\Program Files\Vim\vim72\vim.exe, C:\Documents and Settings\administrator\.bashrc
  # maybe zero newline dependency if bare strings only at end of call

(zip with;
  (fun; x, y; (+ (x), (y)));
  1, 2;
  3, 4)

(c compile, (rec;
  name, my project;
  source, (src);
  compile chain, llvm;
  includes, (includes);
  individual opt, (rec;
    main.c, -DGO, -DTEST;
    test.c, -DTEST);
  lib, m, xml))

(outerline, # should be implicit
  (var, project, (rec; name, my project))
  (set, project, source,
    (src)) # pure operation, rebinds project to a new object
  (set, project, compile chain,
    llvm)
  (set, project, includes,
    (includes))
  (set, project, inidividual opt, (rec;
    main.c, -DGO, -DTEST;
    test.c, -DTEST)
  (set, project, libraries,
    m, xml)
  (project)) # outerline looks for a @rules oop-lambda

(+,
  (var, q, 0)
  invalid
  (var, s, 1)
  (q), (s))

(+,
  (var, q, 0)
  (q),
  (var, s, (-, (q) 2))
  (s))

(var, my var, (fun; arg one, arg two; (+, (arg one), (arg two))))
(call, (my var), 1, 2)

(def; my fun, a 1, a 2; (+, (a 1), (a, 2)))
(my fun, 1, 2)
