gcc, -o, main, main.c

(def src, (suffix .c, x, y, z))

(def obj, (swpfix .c, .o, (src))

gcc, -o, main, (src), -I(join `,, lib, lib2)

gcc, -o, main, (src), (prefix -I, lib, lib2)

(def pre-i, ((x...) (prefix -I, x)))

(def op, (cond (env PLUS), (ref +), (else), (ref -)))

(def r, (call (op), 1, 2))

(cond (x), (ls 1, 2, 3), (y), (ls 4, 5, 6))

(cond (x), (@ 1, 2, 3), (y), (@ 4, 5, 6))

(cond (@ (x), 1, 2, 3), (@ (y), 4, 5, 6))

(cond
  @(x),
    1, 2, 3,
  @(y),
    4, 5, 6)

(call (ref var-(proj))) # error if (proj) has more than one item

C:\Program Files\Vim\vim72\vim.exe, C:\Documents and Settings\administrator\.bashrc
  # maybe zero newline dependency if bare strings only at end of call

(zip-with ((x y) (+ (x), (y))), (ls 1, 2), (ls 3, 4))

(zip-with ((x y) (+ (x), (y))), @left 1, 2, @right 3, 4)

(c-compile
  project,
  (src),
  @chain, llvm,
  @inc, (includes),
  @individual-opt, (
    @main.c, -DGO, -DTEST,
    @test.c, -DTEST),
  @lib, m, xml)

(outerline # should be implicit
  (def-compile project)
  (set-src project, (src)) # pure operation, rebinds project to a new object
  (set-chain project, llvm)
  (set-inc project, (includes))
  (set-inidividual-opt project,
    @main.c, -DGO, -DTEST,
    @test.c, -DTEST)
  (set-lib project, m, xml)
  (project))

(+
  (def q 0)
  ignored
  (def s 1)
  (q), (s))

(+
  (def q 0)
  (q),
  (def s (- (q) 2)) # error, q out of scope
  (s))
